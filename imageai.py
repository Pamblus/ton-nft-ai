import aiohttp
import asyncio
import json
import requests
import time
import subprocess
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "64713da3********f-95dc-551228d3e248"
# WALLET_ADDRESS = "UQCanRaXampOVHaytBEWJ0-tlvqNNaA8IMNbrP7H4KyTubCp"
WALLET_ADDRESS = "UQAZi3-4juezPUWeYklag_ocgaceBPAcREaRqKc2uyGz6YbV"
GETGEMS_API_HOST = "https://api.getgems.io"
# COLLECTION_ADDRESS = "EQCllppDPc4Vm5CpVb2UlbKvBagMKlf4QCvdymGGx_x2o9bd"
COLLECTION_ADDRESS = "EQB3cAoOHlU4g1xrSveoyhkhv-4UzniOZO92VjEMTwFJsOFS"
# AUTHORIZATION = "17588049********lHUbhBw9GgtJwPgz"
AUTHORIZATION = "1********978-mainnet-128*******K9"
class ImageAIGenerator:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://neuroimg.art/api/v1/free-generate"
        self.last_lt = 0
    
    async def generate_image(self, prompt):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI API"""
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: '{prompt}'")
        
        async with aiohttp.ClientSession() as session:
            payload = {
                "token": self.api_key,
                "model": "flux-schnell",
                "prompt": prompt,
                "width": 1024,
                "height": 1024,
                "steps": 25,
                "sampler": "Euler",
                "cfg_scale": 7,
                "stream": True,
                "response_type": "url"
            }

            try:
                async with session.post(self.base_url, json=payload) as response:
                    async for line in response.content:
                        if line:
                            try:
                                data = line.decode('utf-8').strip()
                                if data:
                                    status = json.loads(data)
                                    
                                    if status["status"] == "WAITING":
                                        print(f"üïí –í –æ—á–µ—Ä–µ–¥–∏: {status['queue_position']}/{status['queue_total']}")
                                    elif status["status"] == "RUNNING":
                                        print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                                    elif status["status"] == "SUCCESS":
                                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
                                        return status['image_url']
                                
                            except json.JSONDecodeError as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                continue
                
                return None
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                return None

    def download_image(self, image_url):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            response = requests.get(image_url, timeout=30)
            if response.status_code == 200:
                return response.content
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None

    def upload_to_hosting(self, image_data):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = f"ai_image_{int(time.time())}.png"
            with open(temp_filename, 'wb') as f:
                f.write(image_data)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upload.py
            result = subprocess.run([sys.executable, 'upload.py', temp_filename], 
                                  capture_output=True, text=True, timeout=30)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_filename)
            
            if "OK" in result.stdout:
                # –ü–∞—Ä—Å–∏–º URL
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if line.startswith("URL: "):
                        url = line.replace("URL: ", "").strip()
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {url}")
                        return url
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.stdout}")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥: {e}")
            return None

    def mint_nft(self, image_url, owner_address, prompt):
        """–°–æ–∑–¥–∞–µ—Ç NFT —Å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        url = f"{GETGEMS_API_HOST}/public-api/minting/{COLLECTION_ADDRESS}"
        headers = {
            'accept': 'application/json',
            'authorization': AUTHORIZATION,
            'Content-Type': 'application/json'
        }
        
        nft_data = {
            "requestId": f"ai_{int(time.time() * 1000)}",
            "ownerAddress": owner_address,
            "name": f"AI Art: {prompt[:30]}...",
            "description": f"AI generated art for prompt: {prompt}",
            "image": image_url,
            "attributes": [
                {
                    "trait_type": "Generator",
                    "value": "AI"
                },
                {
                    "trait_type": "Prompt",
                    "value": prompt
                },
                {
                    "trait_type": "Type",
                    "value": "AI Art"
                }
            ],
            "index": int(time.time() % 1000000)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        }
        
        try:
            print("üì¶ –ú–∏–Ω—Ç–∏–º NFT...")
            response = requests.post(url, headers=headers, json=nft_data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print("‚úÖ NFT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    print(f"üîó –°—Å—ã–ª–∫–∞: {result['response']['url']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {result}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞: {e}")
            return False

    def get_transactions(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"""
        url = "https://toncenter.com/api/v2/getTransactions"
        params = {
            'address': WALLET_ADDRESS,
            'limit': 5,
            'archival': False
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result', [])
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            return []

    def parse_transaction(self, tx):
        """–ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        try:
            in_msg = tx.get('in_msg', {})
            if not in_msg:
                return None
                
            value = int(in_msg.get('value', 0)) / 10**9
            message = in_msg.get('message', '').strip()
            sender = in_msg.get('source', '')
            lt = int(tx['transaction_id']['lt'])
            
            return {
                'value': value,
                'message': message,
                'sender': sender,
                'lt': lt
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

    async def process_transaction(self, tx_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∏–Ω—Ç NFT"""
        if tx_data['value'] < 0.02:
            print("‚ùå –°—É–º–º–∞ –º–µ–Ω—å—à–µ 0.02 TON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        prompt = tx_data['message']
        if not prompt:
            prompt = "abstract digital art"
        
        print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {tx_data['value']} TON, –ø—Ä–æ–º–ø—Ç: '{prompt}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = await self.generate_image(prompt)
        if not image_url:
            return False
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = self.download_image(image_url)
        if not image_data:
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥
        final_image_url = self.upload_to_hosting(image_data)
        if not final_image_url:
            return False
        
        # –ú–∏–Ω—Ç–∏–º NFT
        success = self.mint_nft(final_image_url, tx_data['sender'], prompt)
        return success

    def get_initial_last_lt(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π LT"""
        transactions = self.get_transactions()
        if transactions:
            return max(int(tx['transaction_id']['lt']) for tx in transactions)
        return 0

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.last_lt = self.get_initial_last_lt()
        
        print("üöÄ AI NFT Generator –∑–∞–ø—É—â–µ–Ω!")
        print(f"üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {WALLET_ADDRESS}")
        print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ >0.02 TON —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º-–ø—Ä–æ–º–ø—Ç–æ–º")
        print("ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Å—Ç NFT")
        print("=" * 60)
        
        while True:
            try:
                transactions = self.get_transactions()
                new_transactions = []
                
                for tx in transactions:
                    tx_lt = int(tx['transaction_id']['lt'])
                    if tx_lt > self.last_lt:
                        new_transactions.append(tx)
                
                if new_transactions:
                    print(f"üì• –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(new_transactions)}")
                
                for tx in new_transactions:
                    tx_data = self.parse_transaction(tx)
                    if tx_data:
                        await self.process_transaction(tx_data)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º last_lt
                    tx_lt = int(tx['transaction_id']['lt'])
                    if tx_lt > self.last_lt:
                        self.last_lt = tx_lt
                
                await asyncio.sleep(5)
                
            except KeyboardInterrupt:
                print("\nüõë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ai_generator = ImageAIGenerator(API_KEY)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await ai_generator.start_monitoring()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ upload.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('upload.py'):
        print("‚ùå –§–∞–π–ª upload.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª upload.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    asyncio.run(main())
